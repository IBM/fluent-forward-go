package protocol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Helo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.MessageType, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(HeloOpts)
		}
		var field []byte
		_ = field
		var zb0002 uint32
		zb0002, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		for zb0002 > 0 {
			zb0002--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err, "Options")
				return
			}
			switch msgp.UnsafeString(field) {
			case "nonce":
				z.Options.Nonce, err = dc.ReadBytes(z.Options.Nonce)
				if err != nil {
					err = msgp.WrapError(err, "Options", "Nonce")
					return
				}
			case "auth":
				z.Options.Auth, err = dc.ReadBytes(z.Options.Auth)
				if err != nil {
					err = msgp.WrapError(err, "Options", "Auth")
					return
				}
			case "keepalive":
				z.Options.Keepalive, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "Options", "Keepalive")
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err, "Options")
					return
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Helo) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteString(z.MessageType)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	if z.Options == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 3
		// write "nonce"
		err = en.Append(0x83, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Options.Nonce)
		if err != nil {
			err = msgp.WrapError(err, "Options", "Nonce")
			return
		}
		// write "auth"
		err = en.Append(0xa4, 0x61, 0x75, 0x74, 0x68)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Options.Auth)
		if err != nil {
			err = msgp.WrapError(err, "Options", "Auth")
			return
		}
		// write "keepalive"
		err = en.Append(0xa9, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBool(z.Options.Keepalive)
		if err != nil {
			err = msgp.WrapError(err, "Options", "Keepalive")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Helo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendString(o, z.MessageType)
	if z.Options == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 3
		// string "nonce"
		o = append(o, 0x83, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
		o = msgp.AppendBytes(o, z.Options.Nonce)
		// string "auth"
		o = append(o, 0xa4, 0x61, 0x75, 0x74, 0x68)
		o = msgp.AppendBytes(o, z.Options.Auth)
		// string "keepalive"
		o = append(o, 0xa9, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65)
		o = msgp.AppendBool(o, z.Options.Keepalive)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Helo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.MessageType, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(HeloOpts)
		}
		var field []byte
		_ = field
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		for zb0002 > 0 {
			zb0002--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err, "Options")
				return
			}
			switch msgp.UnsafeString(field) {
			case "nonce":
				z.Options.Nonce, bts, err = msgp.ReadBytesBytes(bts, z.Options.Nonce)
				if err != nil {
					err = msgp.WrapError(err, "Options", "Nonce")
					return
				}
			case "auth":
				z.Options.Auth, bts, err = msgp.ReadBytesBytes(bts, z.Options.Auth)
				if err != nil {
					err = msgp.WrapError(err, "Options", "Auth")
					return
				}
			case "keepalive":
				z.Options.Keepalive, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Options", "Keepalive")
					return
				}
			default:
				bts, err = msgp.Skip(bts)
				if err != nil {
					err = msgp.WrapError(err, "Options")
					return
				}
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Helo) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.MessageType)
	if z.Options == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 6 + msgp.BytesPrefixSize + len(z.Options.Nonce) + 5 + msgp.BytesPrefixSize + len(z.Options.Auth) + 10 + msgp.BoolSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HeloOpts) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "nonce":
			z.Nonce, err = dc.ReadBytes(z.Nonce)
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "auth":
			z.Auth, err = dc.ReadBytes(z.Auth)
			if err != nil {
				err = msgp.WrapError(err, "Auth")
				return
			}
		case "keepalive":
			z.Keepalive, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Keepalive")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HeloOpts) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "nonce"
	err = en.Append(0x83, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Nonce)
	if err != nil {
		err = msgp.WrapError(err, "Nonce")
		return
	}
	// write "auth"
	err = en.Append(0xa4, 0x61, 0x75, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Auth)
	if err != nil {
		err = msgp.WrapError(err, "Auth")
		return
	}
	// write "keepalive"
	err = en.Append(0xa9, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Keepalive)
	if err != nil {
		err = msgp.WrapError(err, "Keepalive")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HeloOpts) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "nonce"
	o = append(o, 0x83, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendBytes(o, z.Nonce)
	// string "auth"
	o = append(o, 0xa4, 0x61, 0x75, 0x74, 0x68)
	o = msgp.AppendBytes(o, z.Auth)
	// string "keepalive"
	o = append(o, 0xa9, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.Keepalive)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HeloOpts) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "nonce":
			z.Nonce, bts, err = msgp.ReadBytesBytes(bts, z.Nonce)
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "auth":
			z.Auth, bts, err = msgp.ReadBytesBytes(bts, z.Auth)
			if err != nil {
				err = msgp.WrapError(err, "Auth")
				return
			}
		case "keepalive":
			z.Keepalive, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Keepalive")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HeloOpts) Msgsize() (s int) {
	s = 1 + 6 + msgp.BytesPrefixSize + len(z.Nonce) + 5 + msgp.BytesPrefixSize + len(z.Auth) + 10 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Ping) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.MessageType, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	z.ClientHostname, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "ClientHostname")
		return
	}
	z.SharedKeySalt, err = dc.ReadBytes(z.SharedKeySalt)
	if err != nil {
		err = msgp.WrapError(err, "SharedKeySalt")
		return
	}
	z.SharedKeyHexDigest, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "SharedKeyHexDigest")
		return
	}
	z.Username, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	z.Password, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Ping) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 6
	err = en.Append(0x96)
	if err != nil {
		return
	}
	err = en.WriteString(z.MessageType)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	err = en.WriteString(z.ClientHostname)
	if err != nil {
		err = msgp.WrapError(err, "ClientHostname")
		return
	}
	err = en.WriteBytes(z.SharedKeySalt)
	if err != nil {
		err = msgp.WrapError(err, "SharedKeySalt")
		return
	}
	err = en.WriteString(z.SharedKeyHexDigest)
	if err != nil {
		err = msgp.WrapError(err, "SharedKeyHexDigest")
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Ping) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 6
	o = append(o, 0x96)
	o = msgp.AppendString(o, z.MessageType)
	o = msgp.AppendString(o, z.ClientHostname)
	o = msgp.AppendBytes(o, z.SharedKeySalt)
	o = msgp.AppendString(o, z.SharedKeyHexDigest)
	o = msgp.AppendString(o, z.Username)
	o = msgp.AppendString(o, z.Password)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Ping) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.MessageType, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	z.ClientHostname, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ClientHostname")
		return
	}
	z.SharedKeySalt, bts, err = msgp.ReadBytesBytes(bts, z.SharedKeySalt)
	if err != nil {
		err = msgp.WrapError(err, "SharedKeySalt")
		return
	}
	z.SharedKeyHexDigest, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SharedKeyHexDigest")
		return
	}
	z.Username, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	z.Password, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Ping) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.MessageType) + msgp.StringPrefixSize + len(z.ClientHostname) + msgp.BytesPrefixSize + len(z.SharedKeySalt) + msgp.StringPrefixSize + len(z.SharedKeyHexDigest) + msgp.StringPrefixSize + len(z.Username) + msgp.StringPrefixSize + len(z.Password)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Pong) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.MessageType, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	z.AuthResult, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "AuthResult")
		return
	}
	z.Reason, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Reason")
		return
	}
	z.ServerHostname, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "ServerHostname")
		return
	}
	z.SharedKeyHexDigest, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "SharedKeyHexDigest")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pong) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteString(z.MessageType)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	err = en.WriteBool(z.AuthResult)
	if err != nil {
		err = msgp.WrapError(err, "AuthResult")
		return
	}
	err = en.WriteString(z.Reason)
	if err != nil {
		err = msgp.WrapError(err, "Reason")
		return
	}
	err = en.WriteString(z.ServerHostname)
	if err != nil {
		err = msgp.WrapError(err, "ServerHostname")
		return
	}
	err = en.WriteString(z.SharedKeyHexDigest)
	if err != nil {
		err = msgp.WrapError(err, "SharedKeyHexDigest")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pong) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendString(o, z.MessageType)
	o = msgp.AppendBool(o, z.AuthResult)
	o = msgp.AppendString(o, z.Reason)
	o = msgp.AppendString(o, z.ServerHostname)
	o = msgp.AppendString(o, z.SharedKeyHexDigest)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pong) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.MessageType, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	z.AuthResult, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "AuthResult")
		return
	}
	z.Reason, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Reason")
		return
	}
	z.ServerHostname, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ServerHostname")
		return
	}
	z.SharedKeyHexDigest, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SharedKeyHexDigest")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pong) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.MessageType) + msgp.BoolSize + msgp.StringPrefixSize + len(z.Reason) + msgp.StringPrefixSize + len(z.ServerHostname) + msgp.StringPrefixSize + len(z.SharedKeyHexDigest)
	return
}
