fluent/client/client_test.go:24:15: undeclared name: `Client` (typecheck)
		client     *Client
		            ^
fluent/client/client_test.go:30:13: undeclared name: `Client` (typecheck)
		client = &Client{
		          ^
fluent/client/tcp_test.go:19:16: undeclared name: `TCPConnectionFactory` (typecheck)
			factory    *TCPConnectionFactory
			            ^
fluent/client/tcp_test.go:29:15: undeclared name: `TCPConnectionFactory` (typecheck)
			factory = &TCPConnectionFactory{
			           ^
fluent/client/tcp_test.go:30:13: undeclared name: `ServerAddress` (typecheck)
				Target: ServerAddress{
				        ^
fluent/client/ws_client_test.go:21:10: undeclared name: `NewIAMAuthInfo` (typecheck)
		iai := NewIAMAuthInfo("a")
		       ^
fluent/client/ws_client_test.go:31:15: undeclared name: `WSClient` (typecheck)
		client     *WSClient
		            ^
fluent/client/ws_client_test.go:38:13: undeclared name: `WSClient` (typecheck)
		client = &WSClient{
		          ^
fluent/client/ws_client_test.go:134:14: undeclared name: `WSSession` (typecheck)
			session1 *WSSession
			          ^
fluent/client/client_test.go:13:2: "github.com/IBM/fluent-forward-go/fluent/client" imported but not used (typecheck)
	. "github.com/IBM/fluent-forward-go/fluent/client"
	^
fluent/client/tcp_test.go:9:2: "github.com/IBM/fluent-forward-go/fluent/client" imported but not used (typecheck)
	. "github.com/IBM/fluent-forward-go/fluent/client"
	^
fluent/client/ws_client_test.go:9:2: "github.com/IBM/fluent-forward-go/fluent/client" imported but not used (typecheck)
	. "github.com/IBM/fluent-forward-go/fluent/client"
	^
fluent/protocol/message.go:103:5: undeclared name: `z` (typecheck)
	if z.Options != nil {
	   ^
fluent/protocol/message.go:201:98: undeclared name: `z` (typecheck)
	s = 1 + msgp.StringPrefixSize + len(msg.Tag) + msgp.ExtensionPrefixSize + msg.Timestamp.Len() + z.Record.Msgsize()
	                                                                                                ^
fluent/protocol/forward_message_test.go:17:10: undeclared name: `ForwardMessage` (typecheck)
		fwdmsg ForwardMessage
		       ^
fluent/protocol/forward_message_test.go:25:12: undeclared name: `ForwardMessage` (typecheck)
		fwdmsg = ForwardMessage{
		         ^
fluent/protocol/forward_message_test.go:27:15: undeclared name: `EntryExt` (typecheck)
			Entries: []EntryExt{
			           ^
fluent/protocol/forward_message_test.go:29:17: undeclared name: `EventTime` (typecheck)
					Timestamp: EventTime{time.Now()},
					           ^
fluent/protocol/forward_message_test.go:36:17: undeclared name: `EventTime` (typecheck)
					Timestamp: EventTime{time.Now()},
					           ^
fluent/protocol/forward_message_test.go:47:31: undeclared name: `ForwardMessage` (typecheck)
		testMarshalling := func(msg ForwardMessage, opts *MessageOptions) {
		                            ^
fluent/protocol/forward_message_test.go:52:15: undeclared name: `ForwardMessage` (typecheck)
			var unmfwd ForwardMessage
			           ^
fluent/protocol/forward_message_test.go:72:29: undeclared name: `MessageOptions` (typecheck)
			testMarshalling(fwdmsg, &MessageOptions{})
			                         ^
fluent/protocol/forward_message_test.go:75:36: undeclared name: `ForwardMessage` (typecheck)
		testEncodingDecoding := func(msg ForwardMessage, opts *MessageOptions) {
		                                 ^
fluent/protocol/forward_message_test.go:84:15: undeclared name: `ForwardMessage` (typecheck)
			var unmfwd ForwardMessage
			           ^
fluent/protocol/forward_message_test.go:105:34: undeclared name: `MessageOptions` (typecheck)
			testEncodingDecoding(fwdmsg, &MessageOptions{})
			                              ^
fluent/protocol/forward_message_test.go:112:14: undeclared name: `ForwardMessage` (typecheck)
			fwdmsg := ForwardMessage{}
			          ^
fluent/protocol/message_test.go:13:7: undeclared name: `Message` (typecheck)
	v := Message{
	     ^
fluent/protocol/message_test.go:14:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:38:7: undeclared name: `Message` (typecheck)
	v := Message{
	     ^
fluent/protocol/message_test.go:39:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:52:7: undeclared name: `Message` (typecheck)
	v := Message{
	     ^
fluent/protocol/message_test.go:53:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:66:7: undeclared name: `Message` (typecheck)
	v := Message{
	     ^
fluent/protocol/message_test.go:67:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:82:7: undeclared name: `Message` (typecheck)
	v := Message{
	     ^
fluent/protocol/message_test.go:83:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:96:8: undeclared name: `Message` (typecheck)
	vn := Message{}
	      ^
fluent/protocol/message_test.go:114:7: undeclared name: `Message` (typecheck)
	v := Message{}
	     ^
fluent/protocol/message_test.go:134:7: undeclared name: `Message` (typecheck)
	v := Message{}
	     ^
fluent/protocol/message_test.go:154:7: undeclared name: `MessageExt` (typecheck)
	v := MessageExt{
	     ^
fluent/protocol/message_test.go:155:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:179:7: undeclared name: `MessageExt` (typecheck)
	v := MessageExt{
	     ^
fluent/protocol/message_test.go:180:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:193:7: undeclared name: `MessageExt` (typecheck)
	v := MessageExt{
	     ^
fluent/protocol/message_test.go:194:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:207:7: undeclared name: `MessageExt` (typecheck)
	v := MessageExt{
	     ^
fluent/protocol/message_test.go:208:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:223:7: undeclared name: `MessageExt` (typecheck)
	v := MessageExt{
	     ^
fluent/protocol/message_test.go:224:13: undeclared name: `MessageOptions` (typecheck)
		Options: &MessageOptions{},
		          ^
fluent/protocol/message_test.go:237:8: undeclared name: `MessageExt` (typecheck)
	vn := MessageExt{}
	      ^
golangci-lint run ./... failed...
